The objective of this project is to create a React app that allows the user to click a button and 
create a magical item that can be used in 5E Dungeons and Dragons.

I aim to cement my understanding of React and bring what I have been learning at School of Code to this project.

A rough plan with a few simple objectives to start that.

Step 1
- Create a folder for my components, and files for each component
- Create a title component
- Create button component

Step 1 attempted:
Cant seem to create a button component alone, I had to add it to
the "Heading" component. 
Added a console.log when clicked which makes me wonder a few things;
I want each button to do a different thing. Do I need to write a 
response for each button? Would it be better to have (and make work)
a seperate component for each button?
TO COMPLETE STEP 1
-Research buttons within react with jsx
-Decide whether to go for component buttons or not.

PROGRESS MADE: (Step 1 complete)
I have seperated out each button, it seems like the smart thing 
to do in terms of reusability etc.
-Added handleClick function and hooked up the Name button to generate a random 
number when clicked

Step 2
-Currently can generate a random number when name button is clicked - do that for
 all buttons
-Get the random number to show in the <li></li>
-Once the random number shows, research how to access the nameArray and display that 
in place of the random number
-As a note, the random number was a test to make sure the onClick was handled properly
-More thoughts, should the <li> be a seperate component?!


So. Hackathon gave a lot of insight into how React works with state etc. 
Led me to conclude that it is possible to do what I want to do, but I will
need to plan it out properly and have a better understanding of what I am trying 
to do at each stage.
(as a side note, really struggled with the Hackathon despite it being
kinda simple in its aims. Conceptually, I think I understand but I am 
too dumb to know exactly how I can do this sort of thing).

Plan 2:

What files/components do I need?
-index.js that renders App
-app.js that takes in components and are exported in App()

Component List:
-Button Component. Triggers onlick event
...
...
I did my usual thing here of starting a plan, getting a brain wave and trying it out.
I got...something to work. Currently, I can click to button to add a random item to a prerendered
list element.
Next step is to render an li item on click with the randomName inside. Using map()
seems to be the solution, but I cannae figure out the syntax.
A weird bug, when I click the button I store a randomName inside a variable. I then set the state
to the variable, but console log has them being one step behind the other - second button click
sets the state to the first randomName generated on the first button click. The third button click
sets the state to the second randomName generated and so on and so on...

But wait! I cant stop "let me just check this..." with this. I had tried to use map() before 
and was informed that arrayList.map is not a function. MAP ONLY WORKS ON AN ARRAY AND I WAS 
MAKING arrayList A STRING SO I HAD TO SPREAD THE STATE AND ADD THE randomName and it worked ahhhh.

SO.

Step 3.

-Hook up the other buttons to do the same thing. Will they need their own state? Hmm...
-Do some CSS - watch Ninjas tutorial and other bits.
An aside, the console.log vs state not being the same is because the setState is an async function.


Attempt at Step 3.

-CSS can wait.
-Buttons successfully hooked up. Yeah boi. At the minute, they all render as an <li> of the same <ul>. This needs to change.
-A possibly related issue - the <List> componenent. When I swap out the <li> for <List>, nothing renders. This seems
to be due to dataflow issues - I am not sure what is a prop of what and where data needs to get to etc.

Step 4. 

-Map out the dataflow of the app. Figure out where data needs to get to and from, and the method of doing so.
I will use miro to play around and help visualise what is going on.
-Latest push;
    -Deleted dmgbutton.js, weaponbutton.js and namebotton.js and consolidated them into a single Button.js and 
    component. 
    -Added props in App.js to customise the buttons. Ya know, like React intended.